name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Create .env file from secret
        run: echo "${{ secrets.PROD_ENV_FILE }}" > .env

      - name: Build with Maven (skip tests to save time)
        run: mvn -B clean package -DskipTests -T 1C --no-transfer-progress --file pom.xml

      - name: Stop and clean previous PM2 process
        run: |
          if pm2 list | grep -q priziq; then
            echo "Stopping and deleting old process..."
            pm2 stop priziq || true
            pm2 delete priziq || true
          else
            echo "No existing process found, skipping cleanup"
          fi

      - name: Start application with PM2
        run: |
          pm2 start --name priziq "java -jar ./target/PriziQ-0.0.1-SNAPSHOT.jar"

      - name: Verify running process
        run: |
          pm2 list

#name: CI/CD with Docker and Maven
#
#on:
#  push:
#    branches: [ "main" ]
#
#jobs:
#  build-and-deploy:
#    runs-on: self-hosted
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push backend image
#        run: |
#          docker build -t username/my-backend:latest -f dockerfiles/Dockerfile .
#          docker push username/my-backend:latest
#
#      - name: Build and push nginx image
#        run: |
#          docker build -t username/my-nginx:latest -f dockerfiles/Dockerfile.nginx .
#          docker push username/my-nginx:latest
#
#      - name: Deploy to EC2
#        run: |
#          echo "${{ secrets.PROD_ENV_FILE }}" > .env
#          echo "${{ secrets.DOCKER_COMPOSE_FILE }}" > docker-compose.yaml
#          docker-compose pull
#          docker-compose up -d --remove-orphans